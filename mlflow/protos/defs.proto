// Descrption of the source that generated a run
enum SourceType {
  // Within Databricks Notebook environment.
  NOTEBOOK = 1;

  // Scheduled or Run Now Job.
  JOB = 2;

  // As a prepackaged project: either a docker image or github source, ... etc.
  PROJECT = 3;

  // Local run: Using CLI, IDE, or local notebook
  LOCAL = 4;

  // Unknown source type
  UNKNOWN = 1000;
}

// Status of a run
enum RunStatus {
  // Has been initiated
  RUNNING = 1;

  // Scheduled to run at a later time
  SCHEDULED = 2;

  // Run has complete
  FINISHED = 3;

  // Execution failed
  FAILED = 4;

  // Was killed by user
  KILLED = 5;
}

// Metric associated with a run with string key and float value
message Metric {
  // Key identifying this metric
  optional string key = 1;

  // Value associated with this metric
  optional float value = 2;

  // The timestamp at which this metric was recorded
  optional int64 timestamp = 3;
}

// Parameters associated with a run: Key-Value pair of strings
message Param {
  // Key identifying this param
  optional string key = 1;

  // Value for this parameter
  optional string value = 2;
}

message Run {
  optional RunInfo info = 1;
  optional RunData data = 2;
}

message RunData {
  repeated Metric metrics = 1;

  repeated Param params = 2;
}

// Tag for a run
message RunTag {
  optional string key = 1;
  optional string value = 2;
}

// A run of a experiment.
message RunInfo {
  // Unique identifier for the run.
  optional string run_uuid = 1;

  // The experiment
  optional int64 experiment_id = 2;

  // Human readable name that identifies this run.
  optional string name = 3;

  // Source type
  optional SourceType source_type = 4;

  // Source identifier: github URL, name of notebook, name of job ... etc
  optional string source_name = 5;

  // User who initiated this run
  optional string user_id = 6;

  // Current status of the run
  optional RunStatus status = 7;

  // Unix timestamp of when the run started in milliseconds.
  optional int64 start_time = 8;

  // Unix timestamp of when the run ended in milliseconds.
  optional int64 end_time = 9;

  // Git commit of the code used for the run
  optional string source_version = 10;

  // Name of the entry point for the run
  optional string entry_point_name = 11;

  // Additional metadata key-value pairs
  repeated RunTag tags = 12;

  // URI of the directory where artifacts should be uploaded.
  // This can be a local path (starting with "/"), or a distributed file system (DFS)
  // path, like s3://bucket/directory or dbfs:/my/directory.
  // If not set, the local "./mlruns" directory will be chosen.
  optional string artifact_uri = 13;
}

// Experiment
message Experiment {
  // Unique identifier for the experiment
  optional int64 experiment_id = 1;

  // Human readable name that identifies this experiment
  optional string name = 2;

  // Location where all artifacts for this experiment are stored
  optional string artifact_location = 3;

  // TODO: Do we need to qualify location type?
}